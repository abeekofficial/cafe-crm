import {
  useLocation,
  useNavigate,
  useSearchParams
} from "./chunk-DSZR2WPD.js";
import {
  AppProvider
} from "./chunk-S4XGKRVN.js";
import "./chunk-X47VGSCN.js";
import "./chunk-4GGE2DR6.js";
import "./chunk-KDCVS43I.js";
import "./chunk-C6WWHQR7.js";
import "./chunk-URCW3FJT.js";
import {
  require_jsx_runtime
} from "./chunk-S725DACQ.js";
import {
  require_react
} from "./chunk-RLJ2RCJQ.js";
import {
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/@toolpad/core/react-router/ReactRouterAppProvider.js
var React = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
function ReactRouterAppProvider(props) {
  const {
    pathname
  } = useLocation();
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const navigateImpl = React.useCallback((url, {
    history = "auto"
  } = {}) => {
    if (history === "auto" || history === "push") {
      return navigate(url);
    }
    if (history === "replace") {
      return navigate(url, {
        replace: true
      });
    }
    throw new Error(`Invalid history option: ${history}`);
  }, [navigate]);
  const routerImpl = React.useMemo(() => ({
    pathname,
    searchParams,
    navigate: navigateImpl
  }), [pathname, searchParams, navigateImpl]);
  return (0, import_jsx_runtime.jsx)(AppProvider, {
    router: routerImpl,
    ...props
  });
}
export {
  ReactRouterAppProvider as AppProvider,
  ReactRouterAppProvider
};
//# sourceMappingURL=@toolpad_core_react-router.js.map
